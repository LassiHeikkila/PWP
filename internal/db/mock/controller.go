// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/LassiHeikkila/taskey/internal/db (interfaces: Controller)

// Package mock_db is a generated GoMock package.
package mock_db

import (
	reflect "reflect"

	db "github.com/LassiHeikkila/taskey/internal/db"
	gomock "github.com/golang/mock/gomock"
	pgtype "github.com/jackc/pgtype"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// CreateLoginInfo mocks base method.
func (m *MockController) CreateLoginInfo(arg0 *db.LoginInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoginInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoginInfo indicates an expected call of CreateLoginInfo.
func (mr *MockControllerMockRecorder) CreateLoginInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoginInfo", reflect.TypeOf((*MockController)(nil).CreateLoginInfo), arg0)
}

// CreateMachine mocks base method.
func (m *MockController) CreateMachine(arg0 *db.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachine indicates an expected call of CreateMachine.
func (mr *MockControllerMockRecorder) CreateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachine", reflect.TypeOf((*MockController)(nil).CreateMachine), arg0)
}

// CreateMachineToken mocks base method.
func (m *MockController) CreateMachineToken(arg0 *db.MachineToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMachineToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMachineToken indicates an expected call of CreateMachineToken.
func (mr *MockControllerMockRecorder) CreateMachineToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMachineToken", reflect.TypeOf((*MockController)(nil).CreateMachineToken), arg0)
}

// CreateOrganization mocks base method.
func (m *MockController) CreateOrganization(arg0 *db.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrganization", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrganization indicates an expected call of CreateOrganization.
func (mr *MockControllerMockRecorder) CreateOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrganization", reflect.TypeOf((*MockController)(nil).CreateOrganization), arg0)
}

// CreateRecord mocks base method.
func (m *MockController) CreateRecord(arg0 *db.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecord indicates an expected call of CreateRecord.
func (mr *MockControllerMockRecorder) CreateRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecord", reflect.TypeOf((*MockController)(nil).CreateRecord), arg0)
}

// CreateSchedule mocks base method.
func (m *MockController) CreateSchedule(arg0 *db.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockControllerMockRecorder) CreateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockController)(nil).CreateSchedule), arg0)
}

// CreateTask mocks base method.
func (m *MockController) CreateTask(arg0 *db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockControllerMockRecorder) CreateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockController)(nil).CreateTask), arg0)
}

// CreateUser mocks base method.
func (m *MockController) CreateUser(arg0 *db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockControllerMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockController)(nil).CreateUser), arg0)
}

// CreateUserToken mocks base method.
func (m *MockController) CreateUserToken(arg0 *db.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockControllerMockRecorder) CreateUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockController)(nil).CreateUserToken), arg0)
}

// DeleteLoginInfo mocks base method.
func (m *MockController) DeleteLoginInfo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLoginInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLoginInfo indicates an expected call of DeleteLoginInfo.
func (mr *MockControllerMockRecorder) DeleteLoginInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLoginInfo", reflect.TypeOf((*MockController)(nil).DeleteLoginInfo), arg0)
}

// DeleteMachine mocks base method.
func (m *MockController) DeleteMachine(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine.
func (mr *MockControllerMockRecorder) DeleteMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockController)(nil).DeleteMachine), arg0)
}

// DeleteMachineToken mocks base method.
func (m *MockController) DeleteMachineToken(arg0 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachineToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachineToken indicates an expected call of DeleteMachineToken.
func (mr *MockControllerMockRecorder) DeleteMachineToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachineToken", reflect.TypeOf((*MockController)(nil).DeleteMachineToken), arg0)
}

// DeleteOrganization mocks base method.
func (m *MockController) DeleteOrganization(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrganization", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrganization indicates an expected call of DeleteOrganization.
func (mr *MockControllerMockRecorder) DeleteOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrganization", reflect.TypeOf((*MockController)(nil).DeleteOrganization), arg0)
}

// DeleteRecord mocks base method.
func (m *MockController) DeleteRecord(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockControllerMockRecorder) DeleteRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockController)(nil).DeleteRecord), arg0, arg1)
}

// DeleteRecords mocks base method.
func (m *MockController) DeleteRecords(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecords", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecords indicates an expected call of DeleteRecords.
func (mr *MockControllerMockRecorder) DeleteRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecords", reflect.TypeOf((*MockController)(nil).DeleteRecords), arg0)
}

// DeleteSchedule mocks base method.
func (m *MockController) DeleteSchedule(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockControllerMockRecorder) DeleteSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockController)(nil).DeleteSchedule), arg0)
}

// DeleteTask mocks base method.
func (m *MockController) DeleteTask(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTask indicates an expected call of DeleteTask.
func (mr *MockControllerMockRecorder) DeleteTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTask", reflect.TypeOf((*MockController)(nil).DeleteTask), arg0)
}

// DeleteUser mocks base method.
func (m *MockController) DeleteUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockControllerMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockController)(nil).DeleteUser), arg0)
}

// DeleteUserToken mocks base method.
func (m *MockController) DeleteUserToken(arg0 pgtype.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserToken indicates an expected call of DeleteUserToken.
func (mr *MockControllerMockRecorder) DeleteUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserToken", reflect.TypeOf((*MockController)(nil).DeleteUserToken), arg0)
}

// ReadLoginInfo mocks base method.
func (m *MockController) ReadLoginInfo(arg0 string) (*db.LoginInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadLoginInfo", arg0)
	ret0, _ := ret[0].(*db.LoginInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadLoginInfo indicates an expected call of ReadLoginInfo.
func (mr *MockControllerMockRecorder) ReadLoginInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadLoginInfo", reflect.TypeOf((*MockController)(nil).ReadLoginInfo), arg0)
}

// ReadMachine mocks base method.
func (m *MockController) ReadMachine(arg0 string) (*db.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMachine", arg0)
	ret0, _ := ret[0].(*db.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMachine indicates an expected call of ReadMachine.
func (mr *MockControllerMockRecorder) ReadMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMachine", reflect.TypeOf((*MockController)(nil).ReadMachine), arg0)
}

// ReadMachineToken mocks base method.
func (m *MockController) ReadMachineToken(arg0 pgtype.UUID) (*db.MachineToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMachineToken", arg0)
	ret0, _ := ret[0].(*db.MachineToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMachineToken indicates an expected call of ReadMachineToken.
func (mr *MockControllerMockRecorder) ReadMachineToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMachineToken", reflect.TypeOf((*MockController)(nil).ReadMachineToken), arg0)
}

// ReadOrganization mocks base method.
func (m *MockController) ReadOrganization(arg0 string) (*db.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOrganization", arg0)
	ret0, _ := ret[0].(*db.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOrganization indicates an expected call of ReadOrganization.
func (mr *MockControllerMockRecorder) ReadOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOrganization", reflect.TypeOf((*MockController)(nil).ReadOrganization), arg0)
}

// ReadRecords mocks base method.
func (m *MockController) ReadRecords(arg0 string) ([]db.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRecords", arg0)
	ret0, _ := ret[0].([]db.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecords indicates an expected call of ReadRecords.
func (mr *MockControllerMockRecorder) ReadRecords(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecords", reflect.TypeOf((*MockController)(nil).ReadRecords), arg0)
}

// ReadSchedule mocks base method.
func (m *MockController) ReadSchedule(arg0 string) (*db.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadSchedule", arg0)
	ret0, _ := ret[0].(*db.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadSchedule indicates an expected call of ReadSchedule.
func (mr *MockControllerMockRecorder) ReadSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadSchedule", reflect.TypeOf((*MockController)(nil).ReadSchedule), arg0)
}

// ReadTask mocks base method.
func (m *MockController) ReadTask(arg0 string) (*db.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTask", arg0)
	ret0, _ := ret[0].(*db.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadTask indicates an expected call of ReadTask.
func (mr *MockControllerMockRecorder) ReadTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTask", reflect.TypeOf((*MockController)(nil).ReadTask), arg0)
}

// ReadUser mocks base method.
func (m *MockController) ReadUser(arg0 string) (*db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUser", arg0)
	ret0, _ := ret[0].(*db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUser indicates an expected call of ReadUser.
func (mr *MockControllerMockRecorder) ReadUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUser", reflect.TypeOf((*MockController)(nil).ReadUser), arg0)
}

// ReadUserToken mocks base method.
func (m *MockController) ReadUserToken(arg0 pgtype.UUID) (*db.UserToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserToken", arg0)
	ret0, _ := ret[0].(*db.UserToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserToken indicates an expected call of ReadUserToken.
func (mr *MockControllerMockRecorder) ReadUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserToken", reflect.TypeOf((*MockController)(nil).ReadUserToken), arg0)
}

// UpdateLoginInfo mocks base method.
func (m *MockController) UpdateLoginInfo(arg0 *db.LoginInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginInfo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginInfo indicates an expected call of UpdateLoginInfo.
func (mr *MockControllerMockRecorder) UpdateLoginInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginInfo", reflect.TypeOf((*MockController)(nil).UpdateLoginInfo), arg0)
}

// UpdateMachine mocks base method.
func (m *MockController) UpdateMachine(arg0 *db.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachine", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachine indicates an expected call of UpdateMachine.
func (mr *MockControllerMockRecorder) UpdateMachine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachine", reflect.TypeOf((*MockController)(nil).UpdateMachine), arg0)
}

// UpdateMachineToken mocks base method.
func (m *MockController) UpdateMachineToken(arg0 *db.MachineToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachineToken indicates an expected call of UpdateMachineToken.
func (mr *MockControllerMockRecorder) UpdateMachineToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineToken", reflect.TypeOf((*MockController)(nil).UpdateMachineToken), arg0)
}

// UpdateOrganization mocks base method.
func (m *MockController) UpdateOrganization(arg0 *db.Organization) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrganization", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrganization indicates an expected call of UpdateOrganization.
func (mr *MockControllerMockRecorder) UpdateOrganization(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrganization", reflect.TypeOf((*MockController)(nil).UpdateOrganization), arg0)
}

// UpdateRecord mocks base method.
func (m *MockController) UpdateRecord(arg0 *db.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockControllerMockRecorder) UpdateRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockController)(nil).UpdateRecord), arg0)
}

// UpdateSchedule mocks base method.
func (m *MockController) UpdateSchedule(arg0 *db.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockControllerMockRecorder) UpdateSchedule(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockController)(nil).UpdateSchedule), arg0)
}

// UpdateTask mocks base method.
func (m *MockController) UpdateTask(arg0 *db.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTask", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTask indicates an expected call of UpdateTask.
func (mr *MockControllerMockRecorder) UpdateTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTask", reflect.TypeOf((*MockController)(nil).UpdateTask), arg0)
}

// UpdateUser mocks base method.
func (m *MockController) UpdateUser(arg0 *db.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockControllerMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockController)(nil).UpdateUser), arg0)
}

// UpdateUserToken mocks base method.
func (m *MockController) UpdateUserToken(arg0 *db.UserToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserToken indicates an expected call of UpdateUserToken.
func (mr *MockControllerMockRecorder) UpdateUserToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserToken", reflect.TypeOf((*MockController)(nil).UpdateUserToken), arg0)
}

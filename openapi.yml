openapi: 3.0.3

info:
  title: taskey API
  description: |-
    This is the API documentation for taskey.
    It will help you understand how to interact with the server.
    Source code for the project can be found at [taskey repository on Github](https://github.com/LassiHeikkila/taskey).
  contact:
    email: laheikki21@student.oulu.fi
  license:
    name: GNU General Public License
    url: https://raw.githubusercontent.com/LassiHeikkila/taskey/main/LICENSE
  version: 0.1.0

servers:
- url: http://localhost:8080/api/v1

security:
  - bearerAuth: []

paths:
  /signup/:
    post:
      tags:
      - signup
      summary: Initialize a new organization with a single root user
      operationId: initializeOrganization
      requestBody:
        description: Details for creating organization
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
      responses:
        200:
          $ref: '#/components/responses/OrgCreated'
        409:
          $ref: '#/components/responses/Conflict'
        501:
          $ref: '#/components/responses/Unimplemented'
  /organizations/{organization_id}/:
    get:
      tags:
      - organization
      summary: Read organization by id
      operationId: readOrganizationById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      responses:
        200:
          $ref: '#/components/responses/OrganizationResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    put:
      tags:
      - organization
      summary: Update organization by id
      operationId: updateOrganizationById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: Organization object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
      - organization
      summary: Delete organization by id
      operationId: deleteOrganizationById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/users/:
    get:
      tags:
      - users
      summary: Read users
      operationId: readUsers
      parameters:
      - $ref: '#/components/parameters/organizationId'
      responses:
        200:
          $ref: '#/components/responses/UsersResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    post:
      tags:
      - users
      summary: Create user
      operationId: createUser
      parameters:
      - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: User object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/users/{user_id}/:
    get:
      tags:
      - users
      summary: Read user by id
      operationId: readUserById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/UserResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    put:
      tags:
      - users
      summary: Update user by id
      operationId: updateUserById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
      requestBody:
        description: User object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
      - users
      summary: Delete user by id
      operationId: deleteUserById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/users/{user_id}/tokens/:
    post:
      tags:
      - user tokens
      summary: Get a new token for user
      operationId: createUserToken
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - name: user_id
        in: path
        description: id of the user
        required: true
        schema:
          type: string
          example: "user456"
      responses:
        200:
          $ref: '#/components/responses/UserTokenResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/users/{user_id}/tokens/{token}/:
    delete:
      tags:
      - user tokens
      summary: Delete a user token
      operationId: deleteUserToken
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/token'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/:
    get:
      tags:
      - machines
      summary: Read all machines
      operationId: readMachines
      parameters:
      - $ref: '#/components/parameters/organizationId'
      responses:
        200:
          $ref: '#/components/responses/MachinesResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    post:
      tags:
      - machines
      summary: Create a machine
      operationId: createMachineById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: Machine object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/:
    get:
      tags:
      - machines
      summary: Read machine
      operationId: readMachineById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      security:
      - bearerAuth: []
      - accessToken: []
      responses:
        200:
          $ref: '#/components/responses/MachineResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    put:
      tags:
      - machines
      summary: Update a machine
      operationId: updateMachineById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      requestBody:
        description: Machine object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Machine'
        required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
      - machines
      summary: Delete a machine
      operationId: deleteMachineById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/tokens/:
    post:
      tags:
      - machine tokens
      summary: Create a machine token
      operationId: createMachineToken
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      responses:
        200:
          $ref: '#/components/responses/MachineTokenResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/tokens/{token}/:
    delete:
      tags:
      - machine tokens
      summary: Revoke a machine token
      operationId: deleteMachineToken
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      - $ref: '#/components/parameters/token'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/schedule/:
    get:
      tags:
        - schedule
      summary: Read a machine's schedule
      operationId: readMachineSchedule
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      security:
      - bearerAuth: []
      - accessToken: []
      responses:
        200:
          $ref: '#/components/responses/ScheduleResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    post:
      tags:
        - schedule
      summary: Create a machine's schedule
      operationId: createMachineSchedule
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      requestBody:
        description: Schedule object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        501:
          $ref: '#/components/responses/Unimplemented'
    put:
      tags:
        - schedule
      summary: Update a machine's schedule
      operationId: updateMachineSchedule
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      requestBody:
        description: Schedule object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
        - schedule
      summary: Delete a machine's schedule
      operationId: deleteMachineSchedule
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/tasks/:
    get:
      tags:
        - tasks
      summary: Read all defined tasks
      operationId: readAllTasks
      parameters:
      - $ref: '#/components/parameters/organizationId'
      security:
      - bearerAuth: []
      - accessToken: []
      responses:
        200:
          $ref: '#/components/responses/TasksResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    post:
      tags:
        - tasks
      summary: Create new task
      operationId: createTask
      parameters:
      - $ref: '#/components/parameters/organizationId'
      requestBody:
        description: Task object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/tasks/{task_id}/:
    get:
      tags:
        - tasks
      summary: Get task by id
      operationId: readTaskById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/taskId'
      security:
      - bearerAuth: []
      - accessToken: []
      responses:
        200:
          $ref: '#/components/responses/TaskResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    put:
      tags:
        - tasks
      summary: Update task definition
      operationId: updateTaskById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/taskId'
      requestBody:
        description: Task object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        200:
          $ref: '#/components/responses/Success'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
        - tasks
      summary: Delete task definition
      operationId: deleteTaskById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/taskId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/records/:
    get:
      tags:
      - records
      summary: Read records produced by machine
      operationId: readMachineRecords
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      responses:
        200:
          $ref: '#/components/responses/RecordsResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    post:
      tags:
      - records
      summary: Create a new record
      operationId: createMachineRecord
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      security:
      - bearerAuth: []
      - accessToken: []
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /{organization_id}/machines/{machine_id}/records/{record_id}/:
    get:
      tags:
      - records
      summary: Read individual machine record
      operationId: readMachineRecordById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      - $ref: '#/components/parameters/recordId'
      responses:
        200:
          $ref: '#/components/responses/RecordResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
    delete:
      tags:
      - records
      summary: Delete individual machine record
      operationId: deleteMachineRecordById
      parameters:
      - $ref: '#/components/parameters/organizationId'
      - $ref: '#/components/parameters/machineId'
      - $ref: '#/components/parameters/recordId'
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        501:
          $ref: '#/components/responses/Unimplemented'
  /auth/:
    post:
      tags:
      - login
      summary: Get a session token by providing user credentials
      operationId: loginWithCredentials
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        200:
          $ref: '#/components/responses/LoginResponse'
        401:
          $ref: '#/components/responses/Unauthenticated'
        501:
          $ref: '#/components/responses/Unimplemented'
    get:
      tags:
      - login
      summary: Check if session token is valid
      operationId: validateToken
      responses:
        200:
          $ref: '#/components/responses/Success'
        401:
          $ref: '#/components/responses/Unauthenticated'
        501:
          $ref: '#/components/responses/Unimplemented'
components:
  responses:
    Success:
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            success:
              $ref: '#/components/examples/AuthenticatedRequestNoContent'
    Unauthenticated:
      description: Request could not be authenticated (invalid or no token in Authorization header)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            unauthenticated:
              $ref: '#/components/examples/UnauthenticatedRequest'
    Forbidden:
      description: Forbidden action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            unauthenticated:
              $ref: '#/components/examples/Forbidden'
    NotFound:
      description: Requested resource could not be found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            notfound:
              $ref: '#/components/examples/NotFound'
    Conflict:
      description: Resource with same ID or name already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            conflict:
              $ref: '#/components/examples/Conflict'
    Unimplemented:
      description: Requested endpoint is not implemented
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          examples:
            notfound:
              $ref: '#/components/examples/Unimplemented'
    LoginResponse:
      description: Login was successful
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/LoginResponse'
          examples:
            goodlogin:
              $ref: '#/components/examples/GoodLogin'
    OrganizationResponse:
      description: organization details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/Organization'
    UserResponse:
      description: user details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/User'
    UsersResponse:
      description: array of user details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
    MachineResponse:
      description: machine details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/Machine'
    MachinesResponse:
      description: array of machine details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  type: array
                  items:
                    $ref: '#/components/schemas/Machine'
    ScheduleResponse:
      description: schedule details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/Schedule'
    TaskResponse:
      description: task details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/Task'
    TasksResponse:
      description: array of task details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  type: array
                  items:
                    $ref: '#/components/schemas/Task'
    RecordResponse:
      description: record details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/Record'
    RecordsResponse:
      description: array of record details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  type: array
                  items:
                    $ref: '#/components/schemas/Record'
    UserTokenResponse:
      description: token details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/UserToken'
    MachineTokenResponse:
      description: token details
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - payload
              properties:
                payload:
                  $ref: '#/components/schemas/MachineToken'
    OrgCreated:
      description: Organization was created successfully
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ApiResponse'
            - type: object
              required:
              - organization
              - user
              properties:
                organization:
                  $ref: '#/components/schemas/Organization'
                user:
                  $ref: '#/components/schemas/User'
  examples:
    AuthenticatedRequestNoContent:
      summary: Request was authenticated and otherwise acceptable
      value:
        code: 200
        msg: "ok"
    UnauthenticatedRequest:
      summary: Request could not be authenticated
      value:
        code: 401
        msg: "unauthorized"
    Forbidden:
      summary: Request forbidden, user may not have proper role to perform action
      value:
        code: 403
        msg: "forbidden"
    NotFound:
      summary: Requested resource not found
      value:
        code: 404
        msg: "not found"
    Conflict:
      summary: Resource with same name or ID already exists
      value:
        code: 409
        msg: "conflict"
    Unimplemented:
      summary: Requested endpoint is not implemented yet
      value:
        code: 501
        msg: "not implemented yet"
    GoodLogin:
      summary: Login successful
      value:
        code: 200
        msg: "ok"
        payload:
          token: "this would be a JWT"
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
        msg:
          type: string
        payload:
          type: object
      required:
      - code
      - msg
    SignUp:
      type: object
      properties:
        orgName:
          type: string
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
        - orgName
        - username
        - email
        - password
    Organization:
      type: object
      properties:
        name:
          type: string
      required:
      - name
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        organization:
          type: string
        role:
          type: integer
      required:
        - name
        - email
        - organization
        - role
    Machine:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        os:
          type: string
        arch:
          type: string
      required:
        - name
        - OS
        - Arch
    Task:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        content:
          type: object
      required:
        - name
        - content
    Schedule:
      type: object
      properties:
        content:
          type: object
      required:
      - content
    Record:
      type: object
      properties:
        machineName:
          type: string
        taskName:
          type: string
        executedAt:
          type: string
          format: date-time
        status:
          type: integer
        output:
          type: string
    UserToken:
      type: string
      format: uuid
    MachineToken:
      type: string
      format: uuid
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          format: jwt
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    accessToken:
      type: apiKey
      name: Authorization
      in: header
  parameters:
    organizationId:
      name: organization_id
      in: path
      description: id of the organization
      required: true
      schema:
        type: string
        example: "org123"
    machineId:
      name: machine_id
      in: path
      description: id of the machine
      required: true
      schema:
        type: string
        example: "machineXYZ"
    userId:
      name: user_id
      in: path
      description: id of the user
      required: true
      schema:
        type: string
        example: "user456"
    taskId:
      name: task_id
      in: path
      description: id of the task
      required: true
      schema:
        type: string
        example: "taskABC"
    recordId:
      name: record_id
      in: path
      description: id of the task
      required: true
      schema:
        type: integer
        example: 678
    token:
      name: token
      in: path
      description: token to revoke
      required: true
      schema:
        type: string
        format: uuid
        example: "f025331f-267d-474a-8a5f-41a1cc1b8fb9"
